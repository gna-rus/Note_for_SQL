############################
# Грпуппировка
SELECT product_id, COUNT(*) AS NUM
FROM order_items
GROUP BY product_id # по какому столбцу проходит группировка
HAVING COUNT(*) > 1; # требование к каждой группировке в отдеьности чтобы вывести эти данные (если это строки не будет то GROUP BY выведет все уникальные значение в конкретном столбце)
###########################

#1 Надо из staff вывести суммарную з\п (salary) по каждой должности (post)
SELECT post, SUM(salary)
FROM staff
GROUP BY post;

#2 Надо из staff вывести суммарную з\п (salary) для долности Начальник
SELECT post,SUM(salary)
FROM staff
GROUP BY post 
HAVING post = 'Начальник';

#3 Посчитайте и выведите количество сотрудников с должностью 'Рабочий' и возрастом не моложе 24 лет и не старше 49 лет.
SELECT COUNT(id) AS 'количество'
FROM staff
WHERE age >= 24 AND age <= 49
GROUP BY post 
HAVING post = 'Рабочий';

#4 Посчитайте и выведите количество уникальных должностей, имеющихся у сотрудников в сущности 'staff'.
SELECT COUNT(DISTINCT post) AS 'количество специальностей'
FROM staff;

#5 Найдите средний возраст сотрудников по каждой должности из сущности staff. 
Выведите только те должности, у которых средний возраст меньше 30 лет.
SELECT post AS 'post'
FROM staff
GROUP BY post
HAVING AVG(age)<30;
#######################
Сем 5 задача 1
Найти количество сообщений, отправленных каждым пользователей.
В зависимости от количества отправленных сообщений рассчитать ранг пользователей, первое место присвоив пользователю(ям) с наибольшим количеством отправленных сообщений.
Вывести полученный ранг, имя, фамилия, пользователя и кол-во отправленных сообщений. Выводимый список необходимо отсортировать в порядке возрастания ранга.

SELECT 
DENSE_RANK() OVER(ORDER BY COUNT(messages.from_user_id) DESC) AS rank_message,
users.firstname, users.lastname, 
COUNT(messages.id) AS count_messages
FROM users
JOIN messages ON users.id = messages.from_user_id
GROUP BY users.id
ORDER BY count_messages DESC;

#######################
Сем 5 задача 2
Получите список сообщений, отсортированных по возрастанию даты отправки.
Вычислите разность между соседними значениями дат отправки. Разности выразите в минутах.
Выведите идентификатор сообщения, дату отправки, дату отправки следующего сообщения и разницу даты отправки соседних сообщений.

WITH sorted_messages AS (
    SELECT
        id,
        created_at,
        LEAD(created_at) OVER (ORDER BY created_at) AS next_created_at
    FROM
        messages
)

SELECT id, created_at, next_created_at, TIMESTAMPDIFF(MINUTE, created_at, next_created_at) AS diff
FROM sorted_messages
ORDER BY created_at;
